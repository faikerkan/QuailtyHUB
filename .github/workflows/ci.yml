name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_qualityhub
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
        pip install python-decouple

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_NAME=test_qualityhub" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        python manage.py migrate --settings=qualityhub.test_settings

    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --settings=qualityhub.test_settings
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Checks
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: bandit -r calls/ users/ qualityhub/ api/ manage.py --skip B101,B106

    - name: Check for security vulnerabilities
      run: safety scan --key ${{ secrets.SAFETY_API_KEY }} --ci 

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black formatter check
      run: black --check .

    - name: Run isort import sorting check
      run: isort --check-only .

    - name: Run Flake8 linter
      run: flake8 . --max-line-length=88 --ignore=E203,E501,W503,F401,F841,E402,E722 --exclude=migrations,tests,scripts

    - name: Run MyPy type checker
      run: mypy . --ignore-missing-imports --no-strict-optional --disable-error-code=misc --exclude="migrations|tests|scripts|\.venv"

  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: [test, security, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: callqualityhub:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, code-quality, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Burada gerÃ§ek deployment scriptinizi ekleyebilirsiniz
        # Ã–rnek: AWS, Heroku, DigitalOcean, vs.

    - name: Notify deployment
      run: |
        echo "âœ… Deployment completed successfully!" 